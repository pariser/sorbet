digraph "rescue_complex.rb" {
subgraph "cluster_::TestRescue#meth" {
    label = "::TestRescue#meth";
    color = blue;
    "bb::TestRescue#meth_0" [shape = invhouse];
    "bb::TestRescue#meth_1" [shape = parallelogram];

    "bb::TestRescue#meth_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<returnMethodTemp>$2: Integer(0) = 0\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(0)\l<unconditional>\l"
    ];

    "bb::TestRescue#meth_0" -> "bb::TestRescue#meth_1" [style="bold"];
    "bb::TestRescue#meth_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#meth_1" -> "bb::TestRescue#meth_1" [style="bold"];
}

subgraph "cluster_::TestRescue#foo" {
    label = "::TestRescue#foo";
    color = blue;
    "bb::TestRescue#foo_0" [shape = invhouse];
    "bb::TestRescue#foo_1" [shape = parallelogram];

    "bb::TestRescue#foo_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<returnMethodTemp>$2: Integer(1) = 1\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(1)\l<unconditional>\l"
    ];

    "bb::TestRescue#foo_0" -> "bb::TestRescue#foo_1" [style="bold"];
    "bb::TestRescue#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#foo_1" -> "bb::TestRescue#foo_1" [style="bold"];
}

subgraph "cluster_::TestRescue#bar" {
    label = "::TestRescue#bar";
    color = blue;
    "bb::TestRescue#bar_0" [shape = invhouse];
    "bb::TestRescue#bar_1" [shape = parallelogram];

    "bb::TestRescue#bar_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<returnMethodTemp>$2: Integer(2) = 2\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(2)\l<unconditional>\l"
    ];

    "bb::TestRescue#bar_0" -> "bb::TestRescue#bar_1" [style="bold"];
    "bb::TestRescue#bar_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#bar_1" -> "bb::TestRescue#bar_1" [style="bold"];
}

subgraph "cluster_::TestRescue#baz" {
    label = "::TestRescue#baz";
    color = blue;
    "bb::TestRescue#baz_0" [shape = invhouse];
    "bb::TestRescue#baz_1" [shape = parallelogram];

    "bb::TestRescue#baz_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<returnMethodTemp>$2: Integer(3) = 3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: Integer(3)\l<unconditional>\l"
    ];

    "bb::TestRescue#baz_0" -> "bb::TestRescue#baz_1" [style="bold"];
    "bb::TestRescue#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#baz_1" -> "bb::TestRescue#baz_1" [style="bold"];
}

subgraph "cluster_::TestRescue#take_arg" {
    label = "::TestRescue#take_arg";
    color = blue;
    "bb::TestRescue#take_arg_0" [shape = invhouse];
    "bb::TestRescue#take_arg_1" [shape = parallelogram];

    "bb::TestRescue#take_arg_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\lx: T.untyped = load_arg(x)\l<returnMethodTemp>$2: T.untyped = x\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#take_arg_0" -> "bb::TestRescue#take_arg_1" [style="bold"];
    "bb::TestRescue#take_arg_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#take_arg_1" -> "bb::TestRescue#take_arg_1" [style="bold"];
}

subgraph "cluster_::TestRescue#initialize" {
    label = "::TestRescue#initialize";
    color = blue;
    "bb::TestRescue#initialize_0" [shape = invhouse];
    "bb::TestRescue#initialize_1" [shape = parallelogram];

    "bb::TestRescue#initialize_0" [
        label = "block[id=0]()\l@ex$3: T.nilable(StandardError) = alias @ex\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<statTemp>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>\l<statTemp>$7: T.class_of(T) = alias <C T>\l<statTemp>$8: T.class_of(StandardError) = alias <C StandardError>\l<statTemp>$6: <Type: T.nilable(StandardError)> = <statTemp>$7: T.class_of(T).nilable(<statTemp>$8: T.class_of(StandardError))\l<statTemp>$4: Sorbet::Private::Static::Void = <statTemp>$5: T.class_of(Sorbet::Private::Static).keep_for_typechecking(<statTemp>$6: <Type: T.nilable(StandardError)>)\l<castTemp>$9: NilClass = nil\l@ex$3: T.nilable(StandardError) = cast(<castTemp>$9: NilClass, StandardError | NilClass);\l<returnMethodTemp>$2: T.nilable(StandardError) = @ex$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(StandardError)\l<unconditional>\l"
    ];

    "bb::TestRescue#initialize_0" -> "bb::TestRescue#initialize_1" [style="bold"];
    "bb::TestRescue#initialize_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#initialize_1" -> "bb::TestRescue#initialize_1" [style="bold"];
}

subgraph "cluster_::TestRescue#multiple_rescue" {
    label = "::TestRescue#multiple_rescue";
    color = blue;
    "bb::TestRescue#multiple_rescue_0" [shape = invhouse];
    "bb::TestRescue#multiple_rescue_1" [shape = parallelogram];

    "bb::TestRescue#multiple_rescue_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_0" -> "bb::TestRescue#multiple_rescue_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_0" -> "bb::TestRescue#multiple_rescue_4" [style="tapered"];

    "bb::TestRescue#multiple_rescue_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_1" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_3" [
        label = "block[id=3](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$6: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$7: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$6: T.class_of(StandardError))\l<isaCheckTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_3" -> "bb::TestRescue#multiple_rescue_8" [style="bold"];
    "bb::TestRescue#multiple_rescue_3" -> "bb::TestRescue#multiple_rescue_9" [style="tapered"];

    "bb::TestRescue#multiple_rescue_4" [
        label = "block[id=4](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<rescueEndTemp>$5: T.untyped = <unanalyzable>\l<rescueEndTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_4" -> "bb::TestRescue#multiple_rescue_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_4" -> "bb::TestRescue#multiple_rescue_6" [style="tapered"];

    "bb::TestRescue#multiple_rescue_6" [
        label = "block[id=6](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$12: NilClass)\l<gotoDeadTemp>$12: NilClass\l"
    ];

    "bb::TestRescue#multiple_rescue_6" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_6" -> "bb::TestRescue#multiple_rescue_12" [style="tapered"];

    "bb::TestRescue#multiple_rescue_8" [
        label = "block[id=8](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.baz()\l<gotoDeadTemp>$12: NilClass\l"
    ];

    "bb::TestRescue#multiple_rescue_8" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_8" -> "bb::TestRescue#multiple_rescue_12" [style="tapered"];

    "bb::TestRescue#multiple_rescue_9" [
        label = "block[id=9](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<rescueTemp>$3: T.untyped = <unanalyzable>\l<exceptionClassTemp>$9: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$10: T.untyped = <rescueTemp>$3: T.untyped.is_a?(<exceptionClassTemp>$9: T.class_of(StandardError))\l<isaCheckTemp>$10: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_9" -> "bb::TestRescue#multiple_rescue_10" [style="bold"];
    "bb::TestRescue#multiple_rescue_9" -> "bb::TestRescue#multiple_rescue_11" [style="tapered"];

    "bb::TestRescue#multiple_rescue_10" [
        label = "block[id=10](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()\l<gotoDeadTemp>$12: NilClass\l"
    ];

    "bb::TestRescue#multiple_rescue_10" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_10" -> "bb::TestRescue#multiple_rescue_12" [style="tapered"];

    "bb::TestRescue#multiple_rescue_11" [
        label = "block[id=11](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$12: TrueClass(true) = true\l<gotoDeadTemp>$12: TrueClass(true)\l"
    ];

    "bb::TestRescue#multiple_rescue_11" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_11" -> "bb::TestRescue#multiple_rescue_12" [style="tapered"];

    "bb::TestRescue#multiple_rescue_12" [
        label = "block[id=12](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_12" -> "bb::TestRescue#multiple_rescue_1" [style="bold"];
}

subgraph "cluster_::TestRescue#multiple_rescue_classes" {
    label = "::TestRescue#multiple_rescue_classes";
    color = blue;
    "bb::TestRescue#multiple_rescue_classes_0" [shape = invhouse];
    "bb::TestRescue#multiple_rescue_classes_1" [shape = parallelogram];

    "bb::TestRescue#multiple_rescue_classes_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_0" -> "bb::TestRescue#multiple_rescue_classes_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_0" -> "bb::TestRescue#multiple_rescue_classes_4" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_1" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_3" [
        label = "block[id=3](<returnMethodTemp>$2: T.untyped)\lbaz: T.untyped = <unanalyzable>\l<exceptionClassTemp>$6: T.untyped = alias <C T.untyped>\l<isaCheckTemp>$7: T.untyped = baz: T.untyped.is_a?(<exceptionClassTemp>$6: T.untyped)\l<isaCheckTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_3" -> "bb::TestRescue#multiple_rescue_classes_8" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_3" -> "bb::TestRescue#multiple_rescue_classes_9" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_4" [
        label = "block[id=4](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<rescueEndTemp>$5: T.untyped = <unanalyzable>\l<rescueEndTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_4" -> "bb::TestRescue#multiple_rescue_classes_3" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_4" -> "bb::TestRescue#multiple_rescue_classes_6" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_6" [
        label = "block[id=6](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$10: NilClass)\l<gotoDeadTemp>$10: NilClass\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_6" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_6" -> "bb::TestRescue#multiple_rescue_classes_11" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_8" [
        label = "block[id=8](baz: T.untyped)\l<returnMethodTemp>$2: T.untyped = baz\l<gotoDeadTemp>$10: NilClass\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_8" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_8" -> "bb::TestRescue#multiple_rescue_classes_11" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_9" [
        label = "block[id=9](<returnMethodTemp>$2: T.untyped, baz: T.untyped)\l<exceptionClassTemp>$8: T.untyped = alias <C T.untyped>\l<isaCheckTemp>$9: T.untyped = baz: T.untyped.is_a?(<exceptionClassTemp>$8: T.untyped)\l<isaCheckTemp>$9: T.untyped\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_9" -> "bb::TestRescue#multiple_rescue_classes_8" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_9" -> "bb::TestRescue#multiple_rescue_classes_10" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_10" [
        label = "block[id=10](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$10: TrueClass(true) = true\l<gotoDeadTemp>$10: TrueClass(true)\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_10" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
    "bb::TestRescue#multiple_rescue_classes_10" -> "bb::TestRescue#multiple_rescue_classes_11" [style="tapered"];

    "bb::TestRescue#multiple_rescue_classes_11" [
        label = "block[id=11](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#multiple_rescue_classes_11" -> "bb::TestRescue#multiple_rescue_classes_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_ensure" {
    label = "::TestRescue#parse_rescue_ensure";
    color = blue;
    "bb::TestRescue#parse_rescue_ensure_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_ensure_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_ensure_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_0" -> "bb::TestRescue#parse_rescue_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_0" -> "bb::TestRescue#parse_rescue_ensure_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_1" -> "bb::TestRescue#parse_rescue_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_3" [
        label = "block[id=3](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$6: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$7: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$6: T.class_of(StandardError))\l<isaCheckTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_3" -> "bb::TestRescue#parse_rescue_ensure_8" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_3" -> "bb::TestRescue#parse_rescue_ensure_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_4" [
        label = "block[id=4](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<rescueEndTemp>$5: T.untyped = <unanalyzable>\l<rescueEndTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_4" -> "bb::TestRescue#parse_rescue_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_4" -> "bb::TestRescue#parse_rescue_ensure_6" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_6" [
        label = "block[id=6](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <gotoDeadTemp>$9: T.nilable(TrueClass))\l<throwAwayTemp>$10: T.untyped = <self>: TestRescue.bar()\l<gotoDeadTemp>$9: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_6" -> "bb::TestRescue#parse_rescue_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_6" -> "bb::TestRescue#parse_rescue_ensure_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_ensure_8" [
        label = "block[id=8](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.baz()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_8" -> "bb::TestRescue#parse_rescue_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_9" [
        label = "block[id=9](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<gotoDeadTemp>$9: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_9" -> "bb::TestRescue#parse_rescue_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_ensure_10" [
        label = "block[id=10](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_ensure_10" -> "bb::TestRescue#parse_rescue_ensure_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_bug_rescue_empty_else" {
    label = "::TestRescue#parse_bug_rescue_empty_else";
    color = blue;
    "bb::TestRescue#parse_bug_rescue_empty_else_0" [shape = invhouse];
    "bb::TestRescue#parse_bug_rescue_empty_else_1" [shape = parallelogram];

    "bb::TestRescue#parse_bug_rescue_empty_else_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_0" -> "bb::TestRescue#parse_bug_rescue_empty_else_3" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_0" -> "bb::TestRescue#parse_bug_rescue_empty_else_7" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_1" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_3" [
        label = "block[id=3]()\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$5: T.class_of(LoadError) = alias <C LoadError>\l<isaCheckTemp>$6: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$5: T.class_of(LoadError))\l<isaCheckTemp>$6: T.untyped\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_3" -> "bb::TestRescue#parse_bug_rescue_empty_else_6" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_3" -> "bb::TestRescue#parse_bug_rescue_empty_else_9" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_6" [
        label = "block[id=6](<gotoDeadTemp>$7: NilClass)\l<gotoDeadTemp>$7: NilClass\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_6" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_6" -> "bb::TestRescue#parse_bug_rescue_empty_else_10" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_7" [
        label = "block[id=7]()\l<rescueEndTemp>$4: T.untyped = <unanalyzable>\l<rescueEndTemp>$4: T.untyped\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_7" -> "bb::TestRescue#parse_bug_rescue_empty_else_3" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_7" -> "bb::TestRescue#parse_bug_rescue_empty_else_6" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_9" [
        label = "block[id=9]()\l<gotoDeadTemp>$7: TrueClass(true) = true\l<gotoDeadTemp>$7: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_9" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
    "bb::TestRescue#parse_bug_rescue_empty_else_9" -> "bb::TestRescue#parse_bug_rescue_empty_else_10" [style="tapered"];

    "bb::TestRescue#parse_bug_rescue_empty_else_10" [
        label = "block[id=10]()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_bug_rescue_empty_else_10" -> "bb::TestRescue#parse_bug_rescue_empty_else_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12686" {
    label = "::TestRescue#parse_ruby_bug_12686";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12686_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12686_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12686_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$5: T.untyped = <unanalyzable>\l<rescueStartTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_0" -> "bb::TestRescue#parse_ruby_bug_12686_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_0" -> "bb::TestRescue#parse_ruby_bug_12686_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_1" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_3" [
        label = "block[id=3](<statTemp>$4: T.untyped, <self>: TestRescue)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$8: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$9: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$8: T.class_of(StandardError))\l<isaCheckTemp>$9: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_3" -> "bb::TestRescue#parse_ruby_bug_12686_8" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_3" -> "bb::TestRescue#parse_ruby_bug_12686_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_4" [
        label = "block[id=4](<self>: TestRescue)\l<statTemp>$4: T.untyped = <self>: TestRescue.bar()\l<rescueEndTemp>$7: T.untyped = <unanalyzable>\l<rescueEndTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_4" -> "bb::TestRescue#parse_ruby_bug_12686_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_4" -> "bb::TestRescue#parse_ruby_bug_12686_6" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_6" [
        label = "block[id=6](<statTemp>$4: T.untyped, <self>: TestRescue, <gotoDeadTemp>$10: NilClass)\l<gotoDeadTemp>$10: NilClass\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_6" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_6" -> "bb::TestRescue#parse_ruby_bug_12686_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_8" [
        label = "block[id=8](<self>: TestRescue)\l<statTemp>$4: NilClass = nil\l<gotoDeadTemp>$10: NilClass\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_8" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_8" -> "bb::TestRescue#parse_ruby_bug_12686_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_9" [
        label = "block[id=9](<statTemp>$4: T.untyped, <self>: TestRescue)\l<gotoDeadTemp>$10: TrueClass(true) = true\l<gotoDeadTemp>$10: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_9" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12686_9" -> "bb::TestRescue#parse_ruby_bug_12686_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12686_10" [
        label = "block[id=10](<statTemp>$4: T.untyped, <self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.take_arg(<statTemp>$4: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12686_10" -> "bb::TestRescue#parse_ruby_bug_12686_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_mod" {
    label = "::TestRescue#parse_rescue_mod";
    color = blue;
    "bb::TestRescue#parse_rescue_mod_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_mod_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_mod_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_0" -> "bb::TestRescue#parse_rescue_mod_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_0" -> "bb::TestRescue#parse_rescue_mod_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_1" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_3" [
        label = "block[id=3](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$6: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$7: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$6: T.class_of(StandardError))\l<isaCheckTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_3" -> "bb::TestRescue#parse_rescue_mod_8" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_3" -> "bb::TestRescue#parse_rescue_mod_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_4" [
        label = "block[id=4](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<rescueEndTemp>$5: T.untyped = <unanalyzable>\l<rescueEndTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_4" -> "bb::TestRescue#parse_rescue_mod_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_4" -> "bb::TestRescue#parse_rescue_mod_6" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_6" [
        label = "block[id=6](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$9: NilClass)\l<gotoDeadTemp>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_mod_6" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_6" -> "bb::TestRescue#parse_rescue_mod_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_8" [
        label = "block[id=8](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()\l<gotoDeadTemp>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_mod_8" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_8" -> "bb::TestRescue#parse_rescue_mod_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_9" [
        label = "block[id=9](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$9: TrueClass(true) = true\l<gotoDeadTemp>$9: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_rescue_mod_9" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_9" -> "bb::TestRescue#parse_rescue_mod_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_10" [
        label = "block[id=10](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_10" -> "bb::TestRescue#parse_rescue_mod_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_resbody_list_var" {
    label = "::TestRescue#parse_resbody_list_var";
    color = blue;
    "bb::TestRescue#parse_resbody_list_var_0" [shape = invhouse];
    "bb::TestRescue#parse_resbody_list_var_1" [shape = parallelogram];

    "bb::TestRescue#parse_resbody_list_var_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_0" -> "bb::TestRescue#parse_resbody_list_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_0" -> "bb::TestRescue#parse_resbody_list_var_4" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_1" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_3" [
        label = "block[id=3](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\lex: T.untyped = <unanalyzable>\l<exceptionClassTemp>$6: T.untyped = <self>: TestRescue.foo()\l<isaCheckTemp>$8: T.untyped = ex: T.untyped.is_a?(<exceptionClassTemp>$6: T.untyped)\l<isaCheckTemp>$8: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_3" -> "bb::TestRescue#parse_resbody_list_var_8" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_3" -> "bb::TestRescue#parse_resbody_list_var_9" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_4" [
        label = "block[id=4](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<rescueEndTemp>$5: T.untyped = <unanalyzable>\l<rescueEndTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_4" -> "bb::TestRescue#parse_resbody_list_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_4" -> "bb::TestRescue#parse_resbody_list_var_6" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_6" [
        label = "block[id=6](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$10: NilClass)\l<gotoDeadTemp>$10: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_6" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_6" -> "bb::TestRescue#parse_resbody_list_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_8" [
        label = "block[id=8](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()\l<gotoDeadTemp>$10: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_8" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_8" -> "bb::TestRescue#parse_resbody_list_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_9" [
        label = "block[id=9](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$10: TrueClass(true) = true\l<gotoDeadTemp>$10: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_9" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_list_var_9" -> "bb::TestRescue#parse_resbody_list_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_list_var_10" [
        label = "block[id=10](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_list_var_10" -> "bb::TestRescue#parse_resbody_list_var_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_else_ensure" {
    label = "::TestRescue#parse_rescue_else_ensure";
    color = blue;
    "bb::TestRescue#parse_rescue_else_ensure_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_else_ensure_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_else_ensure_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_0" -> "bb::TestRescue#parse_rescue_else_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_0" -> "bb::TestRescue#parse_rescue_else_ensure_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_1" -> "bb::TestRescue#parse_rescue_else_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_3" [
        label = "block[id=3](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$7: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$8: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$7: T.class_of(StandardError))\l<isaCheckTemp>$8: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_3" -> "bb::TestRescue#parse_rescue_else_ensure_8" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_3" -> "bb::TestRescue#parse_rescue_else_ensure_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_4" [
        label = "block[id=4](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.foo()\l<rescueEndTemp>$6: T.untyped = <unanalyzable>\l<rescueEndTemp>$6: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_4" -> "bb::TestRescue#parse_rescue_else_ensure_3" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_4" -> "bb::TestRescue#parse_rescue_else_ensure_6" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_6" [
        label = "block[id=6](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, <gotoDeadTemp>$10: T.nilable(TrueClass))\l<throwAwayTemp>$11: T.untyped = <self>: TestRescue.bar()\l<gotoDeadTemp>$10: T.nilable(TrueClass)\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_6" -> "bb::TestRescue#parse_rescue_else_ensure_1" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_6" -> "bb::TestRescue#parse_rescue_else_ensure_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_else_ensure_8" [
        label = "block[id=8](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.baz()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_8" -> "bb::TestRescue#parse_rescue_else_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_9" [
        label = "block[id=9](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<gotoDeadTemp>$10: TrueClass(true) = true\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_9" -> "bb::TestRescue#parse_rescue_else_ensure_6" [style="bold"];
    "bb::TestRescue#parse_rescue_else_ensure_10" [
        label = "block[id=10](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_else_ensure_10" -> "bb::TestRescue#parse_rescue_else_ensure_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue" {
    label = "::TestRescue#parse_rescue";
    color = blue;
    "bb::TestRescue#parse_rescue_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_0" -> "bb::TestRescue#parse_rescue_3" [style="bold"];
    "bb::TestRescue#parse_rescue_0" -> "bb::TestRescue#parse_rescue_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_1" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
    "bb::TestRescue#parse_rescue_3" [
        label = "block[id=3](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$6: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$7: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$6: T.class_of(StandardError))\l<isaCheckTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_3" -> "bb::TestRescue#parse_rescue_8" [style="bold"];
    "bb::TestRescue#parse_rescue_3" -> "bb::TestRescue#parse_rescue_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_4" [
        label = "block[id=4](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<rescueEndTemp>$5: T.untyped = <unanalyzable>\l<rescueEndTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_4" -> "bb::TestRescue#parse_rescue_3" [style="bold"];
    "bb::TestRescue#parse_rescue_4" -> "bb::TestRescue#parse_rescue_6" [style="tapered"];

    "bb::TestRescue#parse_rescue_6" [
        label = "block[id=6](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$9: NilClass)\l<gotoDeadTemp>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_6" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
    "bb::TestRescue#parse_rescue_6" -> "bb::TestRescue#parse_rescue_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_8" [
        label = "block[id=8](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.foo()\l<gotoDeadTemp>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_8" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
    "bb::TestRescue#parse_rescue_8" -> "bb::TestRescue#parse_rescue_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_9" [
        label = "block[id=9](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$9: TrueClass(true) = true\l<gotoDeadTemp>$9: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_rescue_9" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
    "bb::TestRescue#parse_rescue_9" -> "bb::TestRescue#parse_rescue_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_10" [
        label = "block[id=10](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_10" -> "bb::TestRescue#parse_rescue_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_resbody_var" {
    label = "::TestRescue#parse_resbody_var";
    color = blue;
    "bb::TestRescue#parse_resbody_var_0" [shape = invhouse];
    "bb::TestRescue#parse_resbody_var_1" [shape = parallelogram];

    "bb::TestRescue#parse_resbody_var_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_0" -> "bb::TestRescue#parse_resbody_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_0" -> "bb::TestRescue#parse_resbody_var_4" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_3" [
        label = "block[id=3](<returnMethodTemp>$2: T.untyped, <self>: TestRescue)\lex: T.untyped = <unanalyzable>\l<exceptionClassTemp>$6: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$7: T.untyped = ex: T.untyped.is_a?(<exceptionClassTemp>$6: T.class_of(StandardError))\l<isaCheckTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_3" -> "bb::TestRescue#parse_resbody_var_8" [style="bold"];
    "bb::TestRescue#parse_resbody_var_3" -> "bb::TestRescue#parse_resbody_var_9" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_4" [
        label = "block[id=4](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<rescueEndTemp>$5: T.untyped = <unanalyzable>\l<rescueEndTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_4" -> "bb::TestRescue#parse_resbody_var_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_4" -> "bb::TestRescue#parse_resbody_var_6" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_6" [
        label = "block[id=6](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$9: NilClass)\l<gotoDeadTemp>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_var_6" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_6" -> "bb::TestRescue#parse_resbody_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_8" [
        label = "block[id=8](<self>: TestRescue)\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()\l<gotoDeadTemp>$9: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_var_8" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_8" -> "bb::TestRescue#parse_resbody_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_9" [
        label = "block[id=9](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$9: TrueClass(true) = true\l<gotoDeadTemp>$9: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_resbody_var_9" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_9" -> "bb::TestRescue#parse_resbody_var_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_10" [
        label = "block[id=10](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_10" -> "bb::TestRescue#parse_resbody_var_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_resbody_var_1" {
    label = "::TestRescue#parse_resbody_var_1";
    color = blue;
    "bb::TestRescue#parse_resbody_var_1_0" [shape = invhouse];
    "bb::TestRescue#parse_resbody_var_1_1" [shape = parallelogram];

    "bb::TestRescue#parse_resbody_var_1_0" [
        label = "block[id=0]()\l@ex$9: T.nilable(StandardError) = alias @ex\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_0" -> "bb::TestRescue#parse_resbody_var_1_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_0" -> "bb::TestRescue#parse_resbody_var_1_4" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_1" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_3" [
        label = "block[id=3](<returnMethodTemp>$2: T.untyped, <self>: TestRescue, @ex$9: T.nilable(StandardError))\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$6: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$7: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$6: T.class_of(StandardError))\l<isaCheckTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_3" -> "bb::TestRescue#parse_resbody_var_1_8" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_3" -> "bb::TestRescue#parse_resbody_var_1_9" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_4" [
        label = "block[id=4](<self>: TestRescue, @ex$9: T.nilable(StandardError))\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.meth()\l<rescueEndTemp>$5: T.untyped = <unanalyzable>\l<rescueEndTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_4" -> "bb::TestRescue#parse_resbody_var_1_3" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_4" -> "bb::TestRescue#parse_resbody_var_1_6" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_6" [
        label = "block[id=6](<returnMethodTemp>$2: T.untyped, <gotoDeadTemp>$11: NilClass)\l<gotoDeadTemp>$11: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_6" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_6" -> "bb::TestRescue#parse_resbody_var_1_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_8" [
        label = "block[id=8](<self>: TestRescue, @ex$9: T.nilable(StandardError), <rescueTemp>$2: StandardError)\l@ex$9: StandardError = <rescueTemp>$2\l<returnMethodTemp>$2: T.untyped = <self>: TestRescue.bar()\l<gotoDeadTemp>$11: NilClass\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_8" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_8" -> "bb::TestRescue#parse_resbody_var_1_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_9" [
        label = "block[id=9](<returnMethodTemp>$2: T.untyped)\l<gotoDeadTemp>$11: TrueClass(true) = true\l<gotoDeadTemp>$11: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_9" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
    "bb::TestRescue#parse_resbody_var_1_9" -> "bb::TestRescue#parse_resbody_var_1_10" [style="tapered"];

    "bb::TestRescue#parse_resbody_var_1_10" [
        label = "block[id=10](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_resbody_var_1_10" -> "bb::TestRescue#parse_resbody_var_1_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_rescue_mod_op_assign" {
    label = "::TestRescue#parse_rescue_mod_op_assign";
    color = blue;
    "bb::TestRescue#parse_rescue_mod_op_assign_0" [shape = invhouse];
    "bb::TestRescue#parse_rescue_mod_op_assign_1" [shape = parallelogram];

    "bb::TestRescue#parse_rescue_mod_op_assign_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<statTemp>$3: NilClass = foo\l<rescueStartTemp>$5: T.untyped = <unanalyzable>\l<rescueStartTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_0" -> "bb::TestRescue#parse_rescue_mod_op_assign_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_0" -> "bb::TestRescue#parse_rescue_mod_op_assign_4" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_1" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_3" [
        label = "block[id=3](<statTemp>$3: NilClass, <statTemp>$4: T.untyped, <self>: TestRescue)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$8: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$9: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$8: T.class_of(StandardError))\l<isaCheckTemp>$9: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_3" -> "bb::TestRescue#parse_rescue_mod_op_assign_8" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_3" -> "bb::TestRescue#parse_rescue_mod_op_assign_9" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_4" [
        label = "block[id=4](<statTemp>$3: NilClass, <self>: TestRescue)\l<statTemp>$4: T.untyped = <self>: TestRescue.meth()\l<rescueEndTemp>$7: T.untyped = <unanalyzable>\l<rescueEndTemp>$7: T.untyped\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_4" -> "bb::TestRescue#parse_rescue_mod_op_assign_3" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_4" -> "bb::TestRescue#parse_rescue_mod_op_assign_6" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_6" [
        label = "block[id=6](<statTemp>$3: NilClass, <statTemp>$4: T.untyped, <gotoDeadTemp>$11: NilClass)\l<gotoDeadTemp>$11: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_6" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_6" -> "bb::TestRescue#parse_rescue_mod_op_assign_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_8" [
        label = "block[id=8](<statTemp>$3: NilClass, <self>: TestRescue)\l<statTemp>$4: T.untyped = <self>: TestRescue.bar()\l<gotoDeadTemp>$11: NilClass\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_8" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_8" -> "bb::TestRescue#parse_rescue_mod_op_assign_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_9" [
        label = "block[id=9](<statTemp>$3: NilClass, <statTemp>$4: T.untyped)\l<gotoDeadTemp>$11: TrueClass(true) = true\l<gotoDeadTemp>$11: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_9" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
    "bb::TestRescue#parse_rescue_mod_op_assign_9" -> "bb::TestRescue#parse_rescue_mod_op_assign_10" [style="tapered"];

    "bb::TestRescue#parse_rescue_mod_op_assign_10" [
        label = "block[id=10](<statTemp>$3: NilClass, <statTemp>$4: T.untyped)\lfoo: T.untyped = <statTemp>$3: NilClass.+(<statTemp>$4: T.untyped)\l<returnMethodTemp>$2: T.untyped = foo\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_rescue_mod_op_assign_10" -> "bb::TestRescue#parse_rescue_mod_op_assign_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12402" {
    label = "::TestRescue#parse_ruby_bug_12402";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12402_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12402_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12402_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<rescueStartTemp>$3: T.untyped = <unanalyzable>\l<rescueStartTemp>$3: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_0" -> "bb::TestRescue#parse_ruby_bug_12402_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_0" -> "bb::TestRescue#parse_ruby_bug_12402_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_3" [
        label = "block[id=3](foo: NilClass)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$8: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$9: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$8: T.class_of(StandardError))\l<isaCheckTemp>$9: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_3" -> "bb::TestRescue#parse_ruby_bug_12402_8" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_3" -> "bb::TestRescue#parse_ruby_bug_12402_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_4" [
        label = "block[id=4](<self>: TestRescue)\l<statTemp>$5: T.untyped = <self>: TestRescue.bar()\lfoo: T.noreturn = <self>: TestRescue.raise(<statTemp>$5: T.untyped)\l<rescueEndTemp>$7 = <unanalyzable>\l<rescueEndTemp>$7\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_4" -> "bb::TestRescue#parse_ruby_bug_12402_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_4" -> "bb::TestRescue#parse_ruby_bug_12402_6" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_6" [
        label = "block[id=6](<gotoDeadTemp>$10: NilClass, foo: NilClass)\l<gotoDeadTemp>$10\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_6" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_6" -> "bb::TestRescue#parse_ruby_bug_12402_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_8" [
        label = "block[id=8]()\lfoo: NilClass = nil\l<gotoDeadTemp>$10: NilClass\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_8" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_8" -> "bb::TestRescue#parse_ruby_bug_12402_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_9" [
        label = "block[id=9](foo: NilClass)\l<gotoDeadTemp>$10: TrueClass(true) = true\l<gotoDeadTemp>$10: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_9" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_9" -> "bb::TestRescue#parse_ruby_bug_12402_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_10" [
        label = "block[id=10](foo: NilClass)\l<returnMethodTemp>$2: NilClass = foo\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_10" -> "bb::TestRescue#parse_ruby_bug_12402_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12402_1" {
    label = "::TestRescue#parse_ruby_bug_12402_1";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12402_1_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12402_1_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12402_1_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l<statTemp>$3: NilClass = foo\l<rescueStartTemp>$5: T.untyped = <unanalyzable>\l<rescueStartTemp>$5: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_0" -> "bb::TestRescue#parse_ruby_bug_12402_1_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_0" -> "bb::TestRescue#parse_ruby_bug_12402_1_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_1" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_3" [
        label = "block[id=3](<statTemp>$3: NilClass, <statTemp>$4: NilClass)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$10: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$11: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$10: T.class_of(StandardError))\l<isaCheckTemp>$11: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_3" -> "bb::TestRescue#parse_ruby_bug_12402_1_8" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_3" -> "bb::TestRescue#parse_ruby_bug_12402_1_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_4" [
        label = "block[id=4](<statTemp>$3: NilClass, <self>: TestRescue)\l<statTemp>$7: T.untyped = <self>: TestRescue.bar()\l<statTemp>$4: T.noreturn = <self>: TestRescue.raise(<statTemp>$7: T.untyped)\l<rescueEndTemp>$9 = <unanalyzable>\l<rescueEndTemp>$9\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_4" -> "bb::TestRescue#parse_ruby_bug_12402_1_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_4" -> "bb::TestRescue#parse_ruby_bug_12402_1_6" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_6" [
        label = "block[id=6](<statTemp>$3: NilClass, <statTemp>$4: NilClass, <gotoDeadTemp>$12: NilClass)\l<gotoDeadTemp>$12\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_6" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_6" -> "bb::TestRescue#parse_ruby_bug_12402_1_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_8" [
        label = "block[id=8](<statTemp>$3: NilClass)\l<statTemp>$4: NilClass = nil\l<gotoDeadTemp>$12: NilClass\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_8" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_8" -> "bb::TestRescue#parse_ruby_bug_12402_1_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_9" [
        label = "block[id=9](<statTemp>$3: NilClass, <statTemp>$4: NilClass)\l<gotoDeadTemp>$12: TrueClass(true) = true\l<gotoDeadTemp>$12: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_9" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_1_9" -> "bb::TestRescue#parse_ruby_bug_12402_1_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_1_10" [
        label = "block[id=10](<statTemp>$3: NilClass, <statTemp>$4: NilClass)\lfoo: T.untyped = <statTemp>$3: NilClass.+(<statTemp>$4: NilClass)\l<returnMethodTemp>$2: T.untyped = foo\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_1_10" -> "bb::TestRescue#parse_ruby_bug_12402_1_1" [style="bold"];
}

subgraph "cluster_::TestRescue#parse_ruby_bug_12402_2" {
    label = "::TestRescue#parse_ruby_bug_12402_2";
    color = blue;
    "bb::TestRescue#parse_ruby_bug_12402_2_0" [shape = invhouse];
    "bb::TestRescue#parse_ruby_bug_12402_2_1" [shape = parallelogram];

    "bb::TestRescue#parse_ruby_bug_12402_2_0" [
        label = "block[id=0]()\l<self>: TestRescue = cast(<self>: NilClass, TestRescue);\l[]$3: T.untyped = <self>: TestRescue.foo()\l[]$4: Integer(0) = 0\l<statTemp>$9: T.untyped = []$3: T.untyped.[]([]$4: Integer(0))\l<rescueStartTemp>$13: T.untyped = <unanalyzable>\l<rescueStartTemp>$13: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_0" -> "bb::TestRescue#parse_ruby_bug_12402_2_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_0" -> "bb::TestRescue#parse_ruby_bug_12402_2_4" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_1" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_3" [
        label = "block[id=3](<statTemp>$9: T.untyped, <statTemp>$12: NilClass, []$3: T.untyped)\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$18: T.class_of(StandardError) = alias <C StandardError>\l<isaCheckTemp>$19: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$18: T.class_of(StandardError))\l<isaCheckTemp>$19: T.untyped\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_3" -> "bb::TestRescue#parse_ruby_bug_12402_2_8" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_3" -> "bb::TestRescue#parse_ruby_bug_12402_2_9" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_4" [
        label = "block[id=4](<statTemp>$9: T.untyped, <self>: TestRescue, []$3: T.untyped)\l<statTemp>$15: T.untyped = <self>: TestRescue.bar()\l<statTemp>$12: T.noreturn = <self>: TestRescue.raise(<statTemp>$15: T.untyped)\l<rescueEndTemp>$17 = <unanalyzable>\l<rescueEndTemp>$17\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_4" -> "bb::TestRescue#parse_ruby_bug_12402_2_3" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_4" -> "bb::TestRescue#parse_ruby_bug_12402_2_6" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_6" [
        label = "block[id=6](<statTemp>$9: NilClass, <statTemp>$12: NilClass, <gotoDeadTemp>$20: NilClass, []$3: NilClass)\l<gotoDeadTemp>$20\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_6" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_6" -> "bb::TestRescue#parse_ruby_bug_12402_2_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_8" [
        label = "block[id=8](<statTemp>$9: T.untyped, []$3: T.untyped)\l<statTemp>$12: NilClass = nil\l<gotoDeadTemp>$20: NilClass\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_8" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_8" -> "bb::TestRescue#parse_ruby_bug_12402_2_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_9" [
        label = "block[id=9](<statTemp>$9: T.untyped, <statTemp>$12: NilClass, []$3: T.untyped)\l<gotoDeadTemp>$20: TrueClass(true) = true\l<gotoDeadTemp>$20: TrueClass(true)\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_9" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
    "bb::TestRescue#parse_ruby_bug_12402_2_9" -> "bb::TestRescue#parse_ruby_bug_12402_2_10" [style="tapered"];

    "bb::TestRescue#parse_ruby_bug_12402_2_10" [
        label = "block[id=10](<statTemp>$9: T.untyped, <statTemp>$12: NilClass, []$3: T.untyped)\l<statTemp>$8: T.untyped = <statTemp>$9: T.untyped.+(<statTemp>$12: NilClass)\l<returnMethodTemp>$2: T.untyped = []$3: T.untyped.[]=([]$4: NilClass, <statTemp>$8: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestRescue#parse_ruby_bug_12402_2_10" -> "bb::TestRescue#parse_ruby_bug_12402_2_1" [style="bold"];
}

}

